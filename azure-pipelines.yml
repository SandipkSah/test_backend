trigger:
- main
- stage
- try_docker

variables:
  azureServiceConnection: 'essencif.ai_resources'
  vmImageName: 'ubuntu-latest'
  dockerImageName: 'essencifai-backendImmage'  # Project-specific name
  # containerRegistry: 'essencifaibackendregistry.azurecr.io'  # Full Azure Container Registry URL
  containerRegistry: 'container-registry'  # Full Azure Container Registry URL
  

stages:
- stage: Build
  displayName: Build and Dockerize
  jobs:
  - job: BuildDockerImage
    pool:
      vmImage: $(vmImageName)
    steps:
    # Login to Azure Container Registry (if needed)
    - task: Docker@2
      displayName: Docker login to ACR
      inputs:
        command: login
        containerRegistry: '$(containerRegistry)'

    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        command: buildAndPush
        containerRegistry: '$(containerRegistry)'
        repository: 'essencifaiBackendRegistry'
        imageName: '$(dockerImageName)'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: '$(Build.BuildId)'

    # # Build the Docker image with the correct repository and tag
    # - task: Docker@2
    #   displayName: Build Docker Image
    #   inputs:
    #     command: build
    #     containerRegistry: '$(containerRegistry)'
    #     dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
    #     imageName: '$(dockerImageName)'
    #     tags: '$(Build.BuildId)'

    # Push the Docker image to the container registry
    # - task: Docker@2
    #   displayName: Push Docker Image
    #   inputs:
    #     command: push
    #     containerRegistry: '$(containerRegistry)'
    #     imageName: '$(dockerImageName)'
    #     tags: '$(Build.BuildId)'

# - stage: DeployDevelopment
#   displayName: 'Deploy Web App Development'
#   dependsOn: Build
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/stage'))
#   variables:
#     DEPLOYMENT_APP_SERVICE_CONTAINER: 'essencifai-backend-development'
#     AZURE_COMPILATION_ENV: 'development'

#   jobs:
#   - deployment: DevelopmentDeploymentJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'development'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebAppContainer@1
#             inputs:
#               azureSubscription: $(azureServiceConnection)
#               appName: $(DEPLOYMENT_APP_SERVICE_CONTAINER)
#               imageName: $(containerRegistry)/$(dockerImageName):$(Build.BuildId)

- stage: DeployDevelopmentContainer
  displayName: 'Deploy Web App Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    DEPLOYMENT_APP_SERVICE_CONTAINER: 'essencifai-backend-development-container'
    AZURE_COMPILATION_ENV: 'developmentContainer'

  jobs:
  - deployment: DevelopmentDeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: $(azureServiceConnection)
              appName: $(DEPLOYMENT_APP_SERVICE_CONTAINER)
              imageName: $(containerRegistry)/$(dockerImageName):$(Build.BuildId)

- stage: DeployTesting
  displayName: 'Deploy Web App Testing'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/stage'))
  variables:
    DEPLOYMENT_APP_SERVICE_CONTAINER: 'essencifai-backend-testing'
    AZURE_COMPILATION_ENV: 'testing'

  jobs:
  - deployment: TestingDeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: 'testing'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: $(azureServiceConnection)
              appName: $(DEPLOYMENT_APP_SERVICE_CONTAINER)
              imageName: $(containerRegistry)/$(dockerImageName):$(Build.BuildId)

- stage: DeployProduction
  displayName: 'Deploy Web App Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    DEPLOYMENT_APP_SERVICE_CONTAINER: 'essencifai-backend-production'
    AZURE_COMPILATION_ENV: 'production'

  jobs:
  - deployment: ProductionDeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: $(azureServiceConnection)
              appName: $(DEPLOYMENT_APP_SERVICE_CONTAINER)
              imageName: $(containerRegistry)/$(dockerImageName):$(Build.BuildId)

               